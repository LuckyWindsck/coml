coml ::= combined splitter?;

(* Basic Token *)

whitespace ::= " " | "\t";
whitespaces ::= whitespace+;
eol ::= "\r\n" | "\r" | "\n";
splitter ::= whitespaces | eol+ | whitespaces splitter | eol+ splitter;

(* Basic Types *)

basicTypes ::= number | boolean | string | array | hash | patchKey | patch | "nil" | "undefined";

(* Basic Types: Number *)

digit ::= #'[1-9]';
natural ::= digit | "0" | natural "0" | digit natural;
decInteger ::= natural | "-" natural | "+" natural;
float ::= decInteger "f"
        | decInteger "." natural
        | decInteger "." natural "e" decInteger
        | decInteger "." natural "E" decInteger;

binDigit ::= #'[0-1]';
binNature ::= "0b" binDigit+;
binInteger ::= binNature | "-" binNature | "+" binNature;

octDigit ::= #'[0-7]';
octNature ::= "0o" octDigit+ | "0" octDigit+;
octInteger ::= octNature | "-" octNature | "+" octNature;

hexDigit ::= #'[0-9a-fA-F]';
hexNature ::= "0x" hexDigit+;
hexInteger ::= hexNature | "-" hexNature | "+" hexNature;

integer ::= decInteger | binInteger | octInteger | hexInteger;
number ::= integer | float;

(* Basic Types: Boolean *)

boolean ::= "true" | "false";

(* Basic Types: Array *)

arrayElement ::= splitter? expr splitter?;
arrayElements ::= arrayElement "," arrayElement | arrayElement "," | arrayElement;

inlineArrayElement ::= (whitespaces?) "-" whitespaces? expr splitter?;
inlineArrayElements ::= inlineArrayElement | inlineArrayElement eol+ inlineArrayElements;

array ::= "[" splitter? arrayElements splitter? "]"
        | "[" splitter? "]"
        | inlineArrayElements;

(* Basic Types: Hash *)

keyCharStart ::= #'[a-zA-Z_]';

keyCharMiddle ::= keyCharStart | digit | "0" | "_";
key ::= keyCharStart keyCharMiddle*;
hashElement ::= (whitespaces?) key (splitter?) ":" (splitter?) expr;
hash ::= hashElement | hashElement eol+ hash;

(* Basic Types: String *)

string ::= #'".*?"' | #'\'.*?\'';

(* Import *)

import ::= "import" whitespaces (string) whitespaces "as" whitespaces key;
imports ::= import | import eol+ imports;

(* Patch *)

patchKey ::= patchKey "." key
           | patchKey "[" whitespaces? (string | integer) whitespaces? "]"
           | patchKey "[" whitespaces? integer whitespaces? ".." whitespaces? integer whitespaces? "]"
           | patchKey "[" whitespaces? integer whitespaces? "..." whitespaces? integer whitespaces? "]"
           | key;
patchReplace ::= patchKey whitespaces? "=" splitter? expr;
patchAppend ::= patchKey whitespaces? "<<" splitter? (hash | array);
patchPrepend ::= patchKey whitespaces? ">>" splitter? (hash | array);
patchKeyVal ::= patchReplace | patchAppend | patchPrepend;
patchKeyVals ::= patchKeyVal | patchKeyVal eol+ whitespaces? patchKeyVals whitespaces?;
patch ::= "(" patchKey ")" splitter? "{" splitter? patchKeyVals splitter? "}" splitter?
        | "(" patchKey ")" splitter? "<<" splitter? array splitter?;

(* Combination *)

expr ::= basicTypes
       | expr splitter? "??" splitter? expr
       | expr splitter? "+" splitter? expr;

combined ::= expr
           | imports eol+ expr;
