coml ::= combined splitter?;

(* Basic Token *)

whitespace ::= " " | "\t";
whitespaces ::= whitespace+;
eol ::= "\r\n" | "\r" | "\n";
splitter ::= whitespaces | eol+ | whitespaces splitter | eol+ splitter;

(* Basic Types *)

basicTypes ::= number | boolean | string | array | hash | patchKey | patch | "nil" | "undefined";

(* Basic Types: Number *)

digit ::= #'[1-9]';
decNatural ::= digit | "0" | decNatural "0" | digit decNatural;

exponentIndicator ::= "e" | "E";
exponentPart ::= exponentIndicator decNatural
               | exponentIndicator "-" decNatural
               | exponentIndicator "+" decNatural;
unsignedFloat ::= decNatural "f"
               | decNatural "." decNatural exponentPart*;
float ::= unsignedFloat | "-" unsignedFloat | "+" unsignedFloat;

binDigit ::= #'[0-1]';
binNatural ::= "0b" binDigit+;

octDigit ::= #'[0-7]';
octNatural ::= "0o" octDigit+ | "0" octDigit+;

hexDigit ::= #'[0-9a-fA-F]';
hexNatural ::= "0x" hexDigit+;

unsignedInteger ::= decNatural | binNatural | octNatural | hexNatural;
integer ::= unsignedInteger | "-" unsignedInteger | "+" unsignedInteger;
number ::= integer | float;

(* Basic Types: Boolean *)

boolean ::= "true" | "false";

(* Basic Types: Array *)

arrayElement ::= splitter? expr splitter?;
arrayElements ::= arrayElement "," arrayElement | arrayElement "," | arrayElement;

inlineArrayElement ::= (whitespaces?) "-" whitespaces? expr splitter?;
inlineArrayElements ::= inlineArrayElement | inlineArrayElement eol+ inlineArrayElements;

array ::= "[" splitter? arrayElements splitter? "]"
        | "[" splitter? "]"
        | inlineArrayElements;

(* Basic Types: Hash *)

keyCharStart ::= #'[a-zA-Z_]';

keyCharMiddle ::= keyCharStart | digit | "0" | "_";
key ::= keyCharStart keyCharMiddle*;
hashElement ::= (whitespaces?) key (splitter?) ":" (splitter?) expr;
hash ::= hashElement | hashElement eol+ hash;

(* Basic Types: String *)

string ::= #'".*?"' | #'\'.*?\'';

(* Import *)

import ::= "import" whitespaces (string) whitespaces "as" whitespaces key;
imports ::= import | import eol+ imports;

(* Patch *)

patchKey ::= patchKey "." key
           | patchKey "[" whitespaces? (string | integer) whitespaces? "]"
           | patchKey "[" whitespaces? integer whitespaces? ".." whitespaces? integer whitespaces? "]"
           | patchKey "[" whitespaces? integer whitespaces? "..." whitespaces? integer whitespaces? "]"
           | key;

patchReplace ::= patchKey whitespaces? "=" splitter? expr;
patchAppend ::= patchKey whitespaces? "<<" splitter? expr
              | patchKey whitespaces? "+=" splitter? expr;
patchPrepend ::= patchKey whitespaces? ">>" splitter? expr;

patchKeyVal ::= patchReplace | patchAppend | patchPrepend;
patchKeyVals ::= patchKeyVal | patchKeyVal eol+ whitespaces? patchKeyVals whitespaces?;
patch ::= "(" patchKey ")" splitter? "{" splitter? patchKeyVals splitter? "}" splitter?
        | "(" patchKey ")" splitter? "+=" splitter? expr splitter?;

(* Combination *)

expr ::= basicTypes
       | expr splitter? "??" splitter? expr
       | expr splitter? "+" splitter? expr
       | expr splitter? "-" splitter? expr
       | expr splitter? "*" splitter? expr
       | expr splitter? "/" splitter? expr
       | expr splitter? "%" splitter? expr
       | "(" splitter? expr splitter? ")";

combined ::= expr
           | imports eol+ expr;
